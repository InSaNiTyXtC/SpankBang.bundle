#!/usr/bin/env python

"""SpankBang Service Code"""

####################################################################################################
def NormalizeURL(url):
    """This function should return a 'normalised' version of the given URL. Plex uses the URL"""

    return url

####################################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a VideoClipOb-
    ject) and populate it with metadata from the given URL. Only the metadata should be
    added here - the object's key and rating_key properties will be synthesised based on the URL.
    """

    Log.Debug('*' * 80)
    Log.Debug('* MetadataObjectForURL   = %s' %url)

    html = HTML.ElementFromURL(url)
    time_stamp = int(Datetime.TimestampFromDatetime(Datetime.Now()))
    title = html.xpath('//h1/text()')[0].strip()

    for node in html.xpath('//section[@class="details"]'):
        duration = Datetime.MillisecondsFromString(node.xpath('.//div[@class="right_side"]/span')[0].text_content().strip())
        summary_node = node.xpath('.//p/text()')
        if len(summary_node) > 1:
            summary = summary_node[1].strip()
            if summary == 'Category:':
                summary = None
        else:
            summary = None
        genres = node.xpath('.//a[contains(@href, "/category/")]/text()')

    thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
    art = '/:/plugins/com.plexapp.plugins.spankbang/resources/art-default.jpg?t=%s' %time_stamp

    Log.Debug('* title                  = %s' %title)
    Log.Debug('* duration               = %i' %duration)
    Log.Debug('* genres                 = %s' %genres)
    Log.Debug('* summary                = %s' %summary)
    Log.Debug('*' * 80)

    vco = VideoClipObject(
        title=title,
        summary=summary,
        duration=duration,
        genres=genres,
        content_rating='X',
        thumb=thumb,
        art=art,
        source_title='SpankBang')

    return vco

####################################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects and part objects representing
    the media available at the given URL. Callbacks may be used if obtaining the final media
    location requires additional computation.
    """

    Log.Debug('* MediaObjectsForURL     = %s' %url)

    html = HTML.ElementFromURL(url)

    fmt_list = []
    mo = []
    bit_dict = {'1080p': 3500, '720p': 1442, '480p': 665, '240p': 141}

    for fmt_text in html.xpath('//div[@class="player_wrapper"]/nav[@class="toolbar"]/ul/li/@class'):
        if 'q_' in fmt_text:
            fmt_list.append(fmt_text.replace('q_', '').strip())
    if not fmt_list:
        fmt_list.append('480p')

    for fmt in fmt_list:
        mo.append(MediaObject(
            parts=[PartObject(key=Callback(PlayVideo, url=url, fmt=fmt))],
            video_resolution=fmt[:-1],
            bitrate=bit_dict[fmt],
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True))

    return mo

####################################################################################################
def PlayVideo(url, fmt, **kwargs):
    """Format the video url depending of version"""

    html = HTML.ElementFromURL(url)

    Log.Debug('*' * 80)

    data = {}
    for node in html.xpath('//script[@type="text/javascript"]'):
        j_text = node.text_content()
        j_test = Regex('var\ stream_key').search(j_text)
        if j_test:
            j_node = j_text.split(';')
            for item in j_node:
                if 'stream_key' in item:
                    data.update({'stream_key': Regex('\'(.+?)\'').search(item).group(1)})
                elif 'stream_id' in item:
                    data.update({'stream_id': Regex('\'(.+?)\'').search(item).group(1)})

    Log.Debug('* data       = %s' %data)

    video_url = 'http://spankbang.com/_%s/%s/title/%s__mp4' %(data['stream_id'], data['stream_key'], fmt)

    Log.Debug('* video_url  = %s' %video_url)
    if not data['stream_id']:
        Log.Error('* Stream Id not found')
        Log.Debug('*' * 80)
        raise Ex.MediaNotAvailable
    Log.Debug('*' * 80)

    return Redirect(video_url)
